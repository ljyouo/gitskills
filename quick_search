In fact, Git stores everything in its database not by file name but by the hash value of its contents.

configuration
$ git config --list --show-origin //You can view all of your settings and where they are coming from using
$ git config --list  //Checking Your Settings 

Getting Help
$ git help <verb>         //eg. $git help config
$ git <verb> --help
$ man git-<verb>
quick refresher : -h
eg. $git add -h

Identity
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
you need to do this only once if you pass the --global option, because then Git will always use that information for anything you do on that system. If you want to override this with a different name or email address for specific projects, you can run the command without the --global option when you’re in that project.

Editor //编辑器
$ git config --global core.editor editor_name_or_windows_path

Initializing a Repository in an Existing Directory:
$ cd C:/Users/user/my_project    //切到目录
$ git init                       //This creates a new subdirectory named .git
$ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version'

Cloning an Existing Repository
$ git clone https://github.com/libgit2/libgit2  
$ git clone https://github.com/libgit2/libgit2 target_directory

Checking the Status of Your Files
$ git status
$ git status -s //省略性输出，或者写成 git status --short
$ git diff
$ git diff --cached

Ignoring Files
编辑 .gitignore    //$ cat .gitignore , 正则格式, 语法：https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

Skipping the Staging Area
$ git commit -a    //可省略敲 git add的步骤，将之前tracking过的文件改动都commit

remove file from tracked files
$ git rm                   //举例 $ git rm \*~  或者 $ git rm log/\*.log   (\是有必要的)
$ git rm --cached README   //从整个git移除

Moving Files （rename）
$ git mv file_from file_to

Viewing the Commit History
参数列表 https://www.git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
$ git log         //-p or --patch, shows the difference, You can also limit the number of log entries displayed, such as using -2 to show only the last two entries.

Undoing Things
$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend

use "git reset HEAD <file>..." to unstage
use "git checkout -- <file>..." to discard changes in working directory
use "git restore --staged <file>..." to unstage
use "git restore <file>..." to discard changes in working directory

Remote Repositories
$ git remote          //show
origin
$ git remote add pb https://github.com/paulboone/ticgit         //add
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)

$ git fetch pb 
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.

$git push <remote> <branch>         //Pushing to Your Remotes
$git remote show <remote>           //Inspecting a Remote
$git remote rename pb paul    //Renaming
$git remote remove paul        //Removing


Tags
$ git tag                     //list tag
$ git tag -l "v1.8.5*"        //搜索"v1.8.5*"相关tag
$ git tag -a v1.4 -m "my version 1.4"   //Annotated Tags
$ git tag v1.4-lw             //Lightweight Tags
$ git log --pretty=oneline
9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile
$ git tag -a v1.2 9fceb02         //Tagging Later
$git push origin <tagname>        //Sharing Tags
$ git tag -d v1.4-lw              //delete
$ git push <remote> :refs/tags/<tagname>        //remove the tag from remote servers
$ git push origin --delete <tagname>            //remove the tag from remote servers
$ git checkout v2.0.0             //Checking out Tags


Aliases
$ git config --global alias.ci commit       //git commit == git ci
$ git config --global alias.visual '!gitk'
